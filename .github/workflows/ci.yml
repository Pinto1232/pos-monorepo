name: CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'

jobs:
  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    # This job runs for push and pull_request events.

    # Add PostgreSQL service for integration tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: pos_user
          POSTGRES_PASSWORD: rj200100p
          POSTGRES_DB: pos_system_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Add Keycloak for integration tests
      keycloak:
        image: quay.io/keycloak/keycloak:22.0.5
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          KC_DB: dev-file
        ports:
          - 8282:8080
        options: >-
          --health-cmd "curl --fail http://localhost:8080/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Cache NuGet packages to speed up .NET restore
      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('backend/**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      # Add .NET Code Analysis
      - name: Run .NET Code Analysis
        run: |
          dotnet tool install -g dotnet-format
          dotnet format --verify-no-changes --verbosity diagnostic backend/PosBackend.sln

      - name: Restore Dependencies
        run: dotnet restore backend/PosBackend.sln

      - name: Build
        run: dotnet build backend/PosBackend.sln --configuration Release

      # Add Security Scanning
      - name: Run Security Scanning
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}

      # Add Test Coverage Reporting
      - name: Run Tests with Coverage
        run: dotnet test backend/PosBackend.sln --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./backend/coverage.opencover.xml
          fail_ci_if_error: false

      # Configure Artifact Retention
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: backend-build
          path: backend/bin/Release/net8.0/publish/
          retention-days: 7

      # Deployment: Build and push Docker image only on main
      - name: Build Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pos-backend:latest backend

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Add Version Tagging
      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pos-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pos-backend:${{ github.sha }}

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Cache Node modules to speed up npm install
      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      # Add ESLint for code quality
      - name: Run ESLint
        working-directory: frontend
        run: npx eslint . || true

      # Add Security Scanning for frontend
      - name: Run Security Scanning
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --severity-threshold=high
          file: ./frontend/package.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}

      - name: Run Tests with Coverage
        working-directory: frontend
        run: npm run test -- --coverage || npm run test

      # Upload test coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./frontend/coverage/lcov.info
          fail_ci_if_error: false

      - name: Build
        working-directory: frontend
        run: npm run build

      # Configure Artifact Retention
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 7

      # Build and push Docker image for frontend
      - name: Build Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pos-frontend:latest frontend

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Add Version Tagging
      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pos-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pos-frontend:${{ github.sha }}

      # Deployment: Deploy to Vercel only on main branch
      - name: Deploy to Vercel
        if: github.ref == 'refs/heads/main'
        run: |
          npx vercel --prod --token "${{ secrets.VERCEL_TOKEN }}"

  docker-compose-test:
    name: Test Docker Compose Setup
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Build and start the Docker Compose environment
      - name: Build and start Docker Compose
        run: |
          docker-compose build
          docker-compose up -d

      # Wait for services to be ready
      - name: Wait for services to be ready
        run: |
          # Wait for backend to be ready
          echo "Waiting for backend to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:5107/health; do sleep 2; done' || echo "Backend health check timed out"

          # Wait for frontend to be ready
          echo "Waiting for frontend to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:3000; do sleep 2; done' || echo "Frontend health check timed out"

          # Wait for Keycloak to be ready
          echo "Waiting for Keycloak to be ready..."
          timeout 120 bash -c 'until curl -s http://localhost:8282; do sleep 5; done' || echo "Keycloak health check timed out"

      # Run basic integration tests
      - name: Run basic integration tests
        run: |
          # Test backend API
          curl -s http://localhost:5107/health | grep -q "Healthy" && echo "Backend health check passed" || echo "Backend health check failed"

          # Test frontend
          curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200" && echo "Frontend check passed" || echo "Frontend check failed"

      # Cleanup
      - name: Cleanup Docker Compose
        run: |
          docker-compose down
          docker-compose rm -f